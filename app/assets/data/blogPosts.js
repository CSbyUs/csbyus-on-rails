// TODO: find pictures!
// course id is a three digital number, the first digit represents its category
// csbyus courses start with a 9
module.exports = {
    posts: [
        {
          title:"The Importance of CS Education",
          author:"Megan Phibbons",
          id: "0",
          slug: 'importance-of-cs-ed',
          timestamp:"2019-02-01 20:00",
          content: `As a Computer Science major at Duke and a teaching assistant for our Data Structures and Algorithms class, I feel that I have the opportunity to witness firsthand the way that exposure to computer science prior to college can affect students’ learning. For students without prior experience, there can be a steep learning curve when they get to college, and it is worsened by the fact that some of their peers have known the basics for years. This problem exists for all, but is\ especially prevalent for historically underrepresented groups in computing, such as women and people of color. With this blog post, I’m going to analyze exactly why we see this difference in prior experience and the long-term effects of a lack of early CS education and discuss how our team, CSByUs, is trying to combat this.
        	As we go through the life of a student, I want you to keep in mind the analogy of the leaky STEM pipeline, a phenomenon commonly used to describe the loss of STEM students and workers as they progress through their education. This analogy hinges on the fact that at younger ages, people are interested in STEM fields, but over time, they go on to pursue other majors in college or careers upon graduating. To give an example, we can analyze The Chronicle’s discussion of women in computer science classes over time found here: https://www.dukechronicle.com/article/2017/12/why-women-dont-stick-with-tech. For CS 101, an introductory class, the statistics are approximately half and half for men and women. The percentage of women drops about 10% for CS 201, the data structures and algorithms class. By the time students reach CS 230, a class required for the computer science major, the percentage drops to only about ¼ females. Even during the course of three computer science classes, the STEM pipeline experiences some pretty significant leaks. This implies that for some reason, when looking at higher level computer science classes, more and more women decide to stop pursuing computer science as a major. Why is this? As a female in computer science, I would probably say that it is a self-reinforcing problem. As I see less and less women in my CS classes, I become less and less motivated myself. This causes more women to drop CS, which in turn hurts others’ motivations. To fix this, it is necessary to provide support for underrepresented groups in CS to prevent this feeling of inadequacy and desire to drop out. But how do we even begin to approach that?
          One of the main sources of this problem is the education gap, which is heavily tied into privilege. Our team read a chapter of “Stuck In the Shallow End: Education, Race, and Computing” by Jane Margolis in which she analyzes the way that privilege and race affect stigma and accessibility of computer science education. During her paper, she categorizes schools as privileged and underprivileged. Privileged schools are generally defined to be those with more funding, better resources, and more skilled teachers, whereas underprivileged schools are in poorer areas, have less funding, and a significant lack of resources compared to other schools. Margolis found that in less privileged high schools, the teachers were less likely to be skilled in CS education and encourage students to pursue the field. Additionally, these schools also had less classes and equipment that was older and occasionally didn’t even work. This left many students feeling dissatisfied with their experience and unmotivated to continue on in the field. I believe that this lack of resources for certain groups directly influences what they pursue when they reach college or the workforce.
          Margolis also took note that there was a certain stigma surrounding computer science students. For example, many students reported that a computer science student looked like a “white or asian nerdy guy” or similar descriptors. Because this typical description of a CS student is so limiting, many other individuals feel as if they are not cut out to be in CS because they don’t match a certain demographic. This directly correlates to some of our critically identified problems as a team: access and personal relevance. Access refers to general geography, access to money, and access to better resources/teachers. Personal relevance refers to students who feel disinterested in CS because the problems commonly discussed aren’t relevant to all groups.
        	In order to combat this, our team believes that it is necessary to create accessible and relatable CS education for all students starting at a young age. In doing this, it is possible to boost interest for younger students while also facilitating equality and breaking the stigma before it is even developed. We believe that we can maintain higher percentages of computer science students regardless of their demographic and even out the percentages of various groups in CS. By this point, you may be wondering why it even matters. Colleges give out plenty of CS degrees, we have CS workers, so why do we care? Well, it isn’t always that simple.
        	Going back to our leaky STEM pipeline, it is necessary to address the fact that although we have many CS majors, we don’t necessarily have enough members in the CS workforce. Those that we do have are very uniform, and fit closely within the confines of the aforementioned CS stereotype. In the United States, a large portion of professional careers is dedicated to STEM. However, there are not enough educated employees to fill these careers. For example, according to Jonathan Rothwell’s article “Short on STEM Talent,” there are four million job vacancies in the computer science field, but there are only 40,000 Bachelor’s degrees in computer science earned annually. This is especially a problem noted for senior positions within CS. Although we seem to have many students studying computer science, it is a constantly growing field, and we want to continue supporting that growth.
        	Looking forward, I hope that one day Computer Science education can be accessible for all, and that we can remove the stigma surrounding studying CS. I think that with enough work on our part, we can encourage people from all backgrounds to study CS early on, which will in turn help lessen the steep learning curve in college and boost the STEM workforce as a whole. So far, we have already made a lot of progress toward this through teaching at schools in the local Durham community. During our lesson plans, students create apps with content that they choose, learn about fundamental concepts such as variables and algorithms, and more! If you’re interested in this, check out the About Me tab on our website and go ahead and read other blog posts!`
        },
        {
          title:"Get Involved in Open-Source CS Education",
          author:"Cady Zhou",
          id: "1",
          slug: 'get-involved-in-open-source-cs-ed',
          timestamp:"2019-01-31 20:00",
          content: `When searching for the “definition of open-source”, results return: “Denoting software for which the original source code is made freely available and may be redistributed and modified.”

          When we talk about open-source education, we talk about a similar idea: a way that allows everyone to redistribute and modify courses. It is one of the recent solutions to the effort of implementing low-accessible teaching systems worldwide. To make open-source education possible, the input and effort from each one of you is invaluable. If you are ready to make a change with us, regardless of your role, here are some ways you can get involved.

          For Community partners:
          Community partners, we are excited to know you are interested in making computer science (CS) education more accessible!

          Let’s get in touch first. Regardless of how much you have read about us, we are always interested in hearing about your stories, opinions, and vision in education. By completing the interest form here, we	will contact you through email as soon as possible!

          Uploading courses to our website is the best way to support our community. All courses uploaded will be completely free to be shared and modified by everybody. The best way to get started with the process is to contact us using the interest form just mentioned. At the current stage, we will use a hyperlink to share your material with others users of our website, ideally in the form of a google doc, youtube channel, or any other open medium you prefer.

          You are also welcome to write blog posts introducing your community and what open-source education means to you. It is inspirational to hear from people with the same vision for our education system! Now we would contact you by email if you fill out the interest form and indicate your wish to post on our website. An online submission for blogs is coming soon.

          For Educators:
          Educators, please use this website as a resource for your own teaching. Here are some ways we recommend to do this with current courses:
          Uses current courses as teaching material or an outline of your course if you decide to teach a class with a similar topic;
          Encourage your students who are interested in Computer Science exploring this website on their own;
          Modify existing courses to fit the background of your students

          After modifying a course, we are also glad to upload your version of the course on the website with your name, school, class topic, and students’ background labeled. We believe this step helps other teachers with a similar student group to build their courses. It also encourages the development of open source education.

          For Students:
          Fellow students, this is your playground! Explore, learn and think! The purpose of this website is to provide each one of you, regardless of your background, an equal chance to explore the field of Computer Science.

          At the same time, we hope your takeaways include not only knowledge from classes, but also your own thinking about open-source education. If you can, tell your friends about your stories with open-source education, or share it with us through a blog post. Everyone has the power to influence people around you to become part of the open-source education family!

          At last, everyone, we are open to any suggestions on how to improve our website and new features to include. Feedback always helps and motivates us in making CS education more accessible!`
        },
        {
          title:"Teaching Computer Science",
          author:"Eliza Paradise",
          id: "2",
          slug: 'teaching-cs',
          timestamp:"2019-01-29 20:00",
          content: `	There are many challenges plaguing the field of computer science education today, including issues of unequal access, teacher bias, and lack of qualified teachers. While some of these can be remedied more easily than others, great progress has been made in recent years to close these gaps and make computer science a field open to all. In spite of recent strides, a significant problem that persists is the need for a computer science curriculum that makes computer science feel relevant and comprehensible to all, regardless of background or academic interests. Even those who may not pursue a career in computer science can benefit from the critical thinking and problem-solving skills that computer science teaches. In addition, as technology becomes more deeply integrated in many facets of everyday life, computer literacy is becoming increasingly necessary, and these persistent problems in computer science education remain concerning. In order to address these issues, Duke undergraduates founded CSbyUs, a student-led initiative focused on broadening access to quality computer science education and igniting future change agents to transform their communities with tools developed through computer science education. There are three main components to this initiative: curriculum development, teaching, and technology development. I chose to join the teaching and technology teams because, as a computer science major and an education minor, I am passionate about both the importance of computer science education and the usage of technology to create meaningful social impact. I believe that all students should grow up believing that computer science is a field for them, and they should understand that computer science can serve as a tool no matter what their interests- whether they love playing basketball, exploring the wilderness, or researching unicorns. My experience on the teaching team has taught me a lot about practices that can be employed to accomplish this goal and encourage more students to realize the potential of computer science.
          Teaching middle school students isn’t always easy, and my co-teachers and I have learned a lot through both our successes and our failures. Reflection is a key part of our teaching process, and we rely on both discussion-based reflections and written reflections to iterate on our curriculum and our methods in the classroom. With my first semester as a teacher coming to a close, I’ve found that my reflections indicate clear successful practices and clear opportunities for improvement. One of our methodologies which I’ve found to be the most successful is explaining concepts outside of the context of computer science before using them to code. One of our greatest successes with this approach was in a lesson plan where we taught students about algorithms. For the purpose of this lesson, we defined an algorithm as “a series of steps used to accomplish a goal”. To teach this to our students, we utilized two key strategies: we first had the students complete an obstacle course in pairs, where one student was a “turtle” and one was the “programmer”. The programmer had to give the turtle very specific instructions to get the turtle to the finish line- these instructions were the “algorithm” the programmer was writing for the computer. After completing this physical activity, we then taught the students how to use the turtle tool to draw images in Code.org’s AppLab (the platform we have them develop apps in). The turtle activity makes use of experiential learning, a technique that allows students to learn through interactive experiences. In a survey conducted by Signal Hill Group, approximately 92% of teachers indicated that experiential learning was effective for motivating students to learn and raising student achievement.

          My reflection from that day clearly mirrors this support of experiential learning and provides some insight into what was so effective: “Today was a really great day! It was super fun getting to start actually working in AppLab with the students, and they all seemed very engaged and excited about drawing different shapes in AppLab. As someone who’s never taught this lesson plan before, I was really excited about the turtle activity. I thought it was a great way to engage the students in an activity that very clearly translated to the programming tasks. In addition, that activity seemed to clearly help them think about the algorithms they had to use to draw different shapes.”
          My reflection makes it clear that the combination of these two activities, which were both appealing to a variety of students (all middle school kids, regardless of academic interests, can enjoy completing obstacle courses and drawing pictures), formed a strong basis for our course. In addition, students were able to see how computer science concepts can apply more broadly to the world in general, not just to coding. To this day, “algorithm” is one of the first terms that comes to mind when students are asked about terms they’ve learned in class.
          While our experience teaching about algorithms demonstrates a successful lesson that incorporated real-world applications and coding experience, we have also had many lessons that were less successful than we had hoped. One concept that we struggled to teach our students is the idea of a “variable”. One issue is that we did not have a clear definition going into class, as opposed to algorithm, which we had clearly defined. This flaw will definitely be addressed in future curriculum iterations. Our larger issue, however, was that the interactive activities we used did not translate as clearly to code as the turtle activity. We used two activities to teach variables: first, we wrote a poem on the board that had a student’s name in it and kept erasing and rewriting the poem for each student. Eventually, the students realized that we were only changing their names, and we introduced the idea of a variable called “name” that could be used instead. Then, students drew their own robots with variables robotName, robotHeight, and robotJob. Each student wrote the value of these variables on different index cards that we put in envelopes with the variable names. We then completed a MadLibs-style activity where we had blanks for different variable values and had to choose a value from the envelope.
          My reflection after this lesson was not nearly as positive: “Today was a pretty frustrating day for me… I thought that overall the lesson plan was well-organized and the different variable activities were a fun way to introduce the idea of variables, but I think they’re a hard concept to teach/explain, especially without the code basis,” I wrote. In our discussions following the lesson plan, I was able to clearly articulate these ideas to my co-teachers, as I had already spent some time reflecting personally. I presented the idea that variables might be best taught through coding experience, and we discussed future iterations of the curriculum which would allow students to view variables in code before completing hands-on activities. While I initially left this class session feeling frustrated, our reflective and iterative process allowed me to funnel that frustration into concrete next steps.
          These experiences indicate that a combination of coding examples and hands-on activities is the most effective way to teach computer science, yet the dynamics between these two approaches cannot remain constant across lesson plans. It is important to think critically about which concepts should be grounded more strongly in coding and which concepts should initially be taught with hands-on examples. By incorporating both of these aspects, however, students will be empowered to use the concepts they learn in their everyday lives, and they will realize that computer science has broader applications than just coding. By utilizing this methodology and incorporating reflection and feedback into our process, CSbyUs is working to develop mindful, student-oriented approaches to computer science education which cater to all students. Through sustained partnership, reflection, and development, we will be able to foster a community of people working together to achieve this goal.`
        },
        {
          title:"The Importance of Open Source Pedagogy",
          author:"Amarachi Achonu",
          id: "3",
          slug: 'importance-of-open-source-pedagogy',
          timestamp:"2019-02-02 20:00",
          content: `Educators in elementary computer science face a lack of adaptable curricula. Because of this, the call for more modifiable, non-rigid curricula is enticing—assuming that such curricula could benefit teachers by increasing their ability to mold resources for individual classrooms and, ultimately, produce better teaching experiences and learning outcomes.
          Our team at CSbyUs noticed this scarcity, and we’ve created an open source web platform to facilitate more flexible, adaptable, and tested curricula for computer science educators. The mission of the CSbyUs team has always been open source technology to improve pedagogy in computer science which includes increasing support for teachers. One of the ways in which we aim to support teachers is by increasing access to more adaptable curricula. Therefore, this project primarily seeks to use the principle of open source--and the benefits inherent in it--to expand the possibilities of modern curriculum-making.
          Why is the lack of adaptable curricula a problem for computer science education? In today’s classrooms, rigid curriculum dominates as it is often monotonous and routinely distributed in each classroom. Many of these curriculums are made without including the space for dynamic use and application to different classrooms. In contrast, an adaptable curriculum is one that would account for the dynamic and changing classroom environments. An adaptable curriculum means freedom and more options for educators. This is especially important in elementary classrooms where CS is being introduced for the first time, or in classrooms encompassed by underrepresented groups in the field of computer science. As a novel and introductory topic, it is advantageous for curriculum to be made in mind of the diverse landscapes of classrooms and to have the freedom necessary to adapt to the specific needs and mold of a given teacher and/or classroom.
          Curriculum adaptation is certainly at work within CSbyUs. Hayley Barton, a member of a curriculum-making team and a teaching team at CSbyUs, recently demonstrated the benefits of adaptable curricula. Reflecting on her teaching experiences, Barton describes a major influence to why curriculum adaptation is necessary. “We are seeing the range of students that we work with and trying to make the curriculum something that can be tailored to different students.”
          “We want to challenge every student without making it too challenging for any individual student,” says Barton. “Thinking about those things definitely feeds into how I’m thinking about the curriculum in terms of making it accessible for all the students.”
          As a curriculum-maker, this influence causes her to use this experience to make changes to the original curriculum and subsequently implement modified curriculum.
          “We’ve gone through a lot of stages of development. The goal is to have this kind of back and forth where the curriculum is something that’s been tested, where we’ve used our feedback, and also used other research that we’ve done to make it something that’s actually impactful.”
          By observing Hayley’s “back and forth” process, one can notice the iterative process of curriculum-making that she engages in. Between utilizing curricula and modifying curricula, the typically rigid curriculum is iteratively molded to any degree that the user sees fit. Additionally, this iterative process depends on being tested first in the classroom and the teacher’s rationale and reflection on how the curricula uniquely pans out for them in the classroom.
          Curriculum adaptation makes up the important principle on which the platform runs. Like Hayley’s process of curriculum-making, curriculum adaptation is iterative as it involves returning to the drawing board, making changes, and finally, utilizing the curriculum again. Similarly, this iterative process she describes is captured and documented through comments and modifications on the website to capture the essence of adaptable curricula.
          Now, say all teachers are engaged in this flexible process. And furthermore, say we apply this approach to an open source platform that allows teachers in classrooms across the nation to share their experiences with it. This is exactly what the CSByUs site does. To capture this iteration and adaptable curricula, the CSByUs platform documents and shares this iterative process on our site. By documenting it, the CSByUs platform makes tangible the stages in this fluid curriculum-making process.
          The open source pedagogy behind the CSByUs platform, then, brings to life this flexibility inherent in the process of curriculum adaptation. The gold of open source is in its ability to replicate online our own iterative processes in curriculum-making. First, it calls on the valuable first-hand experience and varied perspectives of real CS educators with the curriculum they teach. Next, it capitalizes on iterative processes--inherent in the curriculum-making process--to enable modifications to be made upon curriculum. Finally, it transforms the way curriculum is encountered by teachers by permitting a selection of different versions of both modified curriculum and “the original.” , iteration, and reflection. Through hosting all of these possibilities in an open source platform, users have access to a more flexible approach to teaching and curricula. By being exposed to a collection of varying tested and modified curricula, teachers also have more choice in comparison to the standard, or original, further increasing their flexibility. This all culminates to make curricula more adaptable to different educators and what will fit their needs. This project completely innovates the very medium in which teachers encounter and interact with curriculum. Thus, the open source strategy of the platform is crucial to cultivate a hub of flexible curricula for educators.
          For this, open source practice can be the key difference in making rigid curricula more moldable for educators. Furthermore, since this approach effectively melds open-source technology with pedagogical purpose, open-source pedagogy can potentially provide flexibility for educators teaching various curriculum across disciplines.
          Amarachi Achonu is a junior at Duke University majoring in Computer Science and minoring in English.
          Hayley Barton is a senior at Duke University majoring in Economics and minoring in Computer Science and Spanish.`
        },
    ]
};
